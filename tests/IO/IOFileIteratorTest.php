<?php

require_once dirname(__FILE__) . '/../../IO/IOCSVFileIterator.php';
require_once dirname(__FILE__) . '/../dependencies/vendor/autoload.php';

use org\bovigo\vfs;

/**
 * Test class for IOFileIterator.
 * Generated by PHPUnit on 2012-06-01 at 11:39:50.
 */
class IOFileIteratorTest extends PHPUnit_Framework_TestCase {

    protected static $directory = '';
    protected static $filename = '';
    protected static $filePath = '';
    protected static $streamUrl = '';
    protected $handle = NULL;
    protected $file = NULL;
    protected $expectedValues = array(
        array('1', 'One', 'Line One'),
        array('2', 'Two', 'Line Two'),
        array('3', 'Three', 'Line Three')
    );

    /**
     * @var type IOCSVFileIterator
     */
    protected $csvFileIterator = NULL;

    public static function setUpBeforeClass() {
        static::$directory = 'test';
        static::$filename = 'test.csv';
        static::$filePath = self::$directory . DIRECTORY_SEPARATOR . self::$filename;
        static::$streamUrl = vfs\vfsStream::url(static::$filename);
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        vfs\vfsStreamWrapper::register();
        vfs\vfsStreamWrapper::setRoot(new vfs\vfsStreamDirectory('test'));
        vfs\vfsStreamWrapper::getRoot()->addChild(new vfs\vfsStreamFile('test.csv'));
        $this->file = vfs\vfsStreamWrapper::getRoot()->getChild(static::$filename);
        $this->file->setContent(
                <<<EOD
1,One,Line One
2,Two,Line Two
3,Three,Line Three
EOD
        );
        $this->handle = fopen(static::$streamUrl, 'r');
        $this->csvFileIterator = new IOCSVFileIterator($this->handle);
//        $this->csvFileIterator->initialize();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
//        fclose($this->handle);
    }

    /**
     * @covers IOFileIterator::getException
     * @todo Implement testGetException().
     */
    public function testGetException() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers IOFileIterator::isHeaderMatch
     * @todo Implement testIsHeaderMatch().
     */
    public function testIsHeaderMatch() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    public function testKeyIsInitiallyZero() {
        $this->assertSame(0, $this->csvFileIterator->key(), 'Key is initially zero');
        return $this->csvFileIterator;
    }

    /**
     * @depends testKeyIsInitiallyZero 
     */
    public function testNext(IOCSVFileIterator $csvFileIterator) {
        $csvFileIterator->next();
        $this->assertSame(1, $csvFileIterator->key(), 'Key increments to 1 after next');
        return $csvFileIterator;
    }

    /**
     * @depends testNext
     */
    public function testRewind(IOCSVFileIterator $csvFileIterator) {
        $csvFileIterator->rewind();
        $this->assertSame(0, $csvFileIterator->key(), 'Key is zero after rewind');
        return $csvFileIterator;
    }

    /**
     * @depends testRewind
     */
    public function testValid(IOCSVFileIterator $csvFileIterator) {
        $this->assertTrue($csvFileIterator->valid(), 'Current item is valid after rewind.');
        return $csvFileIterator;
    }

    /**
     * @depends testValid
     */
    public function testCurrent(IOCSVFileIterator $csvFileIterator) {
        $current = $csvFileIterator->current();
        $expect = $this->expectedValues[0];
        $this->assertSame($expect, $current, 'current() returns appropriate array');
    }

    /**
     * @depends testCurrent
     */
    public function testForeachWorksAsExpected() {
        $csvFileIterator = $this->csvFileIterator;
        $result = array();
        foreach ($csvFileIterator as $line) {
            $result[] = $line;
        }
        $this->assertSame($this->expectedValues, $result, 'foreach works as expected');
        return $csvFileIterator;
    }

    /**
     * @depends testForeachWorksAsExpected
     */
    public function testStressIteratorFunctions(IOCSVFileIterator $csvFileIterator) {
        $csvFileIterator->rewind();
        $this->assertSame(0, $csvFileIterator->key(), 'Key is initially zero');
        $this->assertTrue($csvFileIterator->valid(), 'Initial record is valid');
        $this->assertSame($this->expectedValues[0], $csvFileIterator->current(), 'First record ok');
        $this->assertSame(0, $csvFileIterator->key(), 'Key should not advance after call to current()');
        $csvFileIterator->next();
        $this->assertTrue($csvFileIterator->valid());
        $this->assertSame(1, $csvFileIterator->key(), 'Key is 1 after next()');
        $this->assertSame($this->expectedValues[1], $csvFileIterator->current(), 'Second record ok');
        $this->assertSame(1, $csvFileIterator->key(), 'Key should not advance after call to current()');
        $this->assertSame($this->expectedValues[1], $csvFileIterator->current(), 'Successive calls to current() ok.');
        $csvFileIterator->next();
        $this->assertTrue($csvFileIterator->valid());
        $this->assertSame(2, $csvFileIterator->key(), 'Key is 2 after 2nd next()');
        $this->assertSame($this->expectedValues[2], $csvFileIterator->current(), 'Third record ok');
        $csvFileIterator->next();
        $this->assertFalse($csvFileIterator->valid());
        $csvFileIterator->rewind();
        $this->assertSame(0, $csvFileIterator->key());
    }

}


//require_once dirname(__FILE__) . '/../../IO/IOFileIterator.php';
//
///**
// * Test class for IOFileIterator.
// * Generated by PHPUnit on 2012-06-01 at 09:35:51.
// */
//class IOFileIteratorTest extends PHPUnit_Framework_TestCase {
//
//    /**
//     * @var IOFileIterator
//     */
//    protected $object;
//
//    /**
//     * Sets up the fixture, for example, opens a network connection.
//     * This method is called before a test is executed.
//     */
//    protected function setUp() {
////        $this->object = new IOFileIterator;
//    }
//
//    /**
//     * Tears down the fixture, for example, closes a network connection.
//     * This method is called after a test is executed.
//     */
//    protected function tearDown() {
//        
//    }
//
//    /**
//     * @covers IOFileIterator::initialize
//     * @todo Implement testInitialize().
//     */
//    public function testInitialize() {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//                'This test has not been implemented yet.'
//        );
//    }
//
//    /**
//     * @covers IOFileIterator::getException
//     * @todo Implement testGetException().
//     */
//    public function testGetException() {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//                'This test has not been implemented yet.'
//        );
//    }
//
//    /**
//     * @covers IOFileIterator::isHeaderMatch
//     * @todo Implement testIsHeaderMatch().
//     */
//    public function testIsHeaderMatch() {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//                'This test has not been implemented yet.'
//        );
//    }
//
//    /**
//     * @covers IOFileIterator::current
//     * @todo Implement testCurrent().
//     */
//    public function testCurrent() {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//                'This test has not been implemented yet.'
//        );
//    }
//
//    /**
//     * @covers IOFileIterator::key
//     * @todo Implement testKey().
//     */
//    public function testKey() {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//                'This test has not been implemented yet.'
//        );
//    }
//
//    /**
//     * @covers IOFileIterator::next
//     * @todo Implement testNext().
//     */
//    public function testNext() {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//                'This test has not been implemented yet.'
//        );
//    }
//
//    /**
//     * @covers IOFileIterator::rewind
//     * @todo Implement testRewind().
//     */
//    public function testRewind() {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//                'This test has not been implemented yet.'
//        );
//    }
//
//    /**
//     * @covers IOFileIterator::valid
//     * @todo Implement testValid().
//     */
//    public function testValid() {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//                'This test has not been implemented yet.'
//        );
//    }
//
//}

?>
