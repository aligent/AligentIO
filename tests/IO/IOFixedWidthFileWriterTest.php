<?php
require_once dirname(__FILE__) . "/../../vendor/autoload.php";
require_once dirname(__FILE__) . '/../dependencies/vendor/autoload.php';

use org\bovigo\vfs;
use Aligent\IO\IOFixedWidthFileWriter;
use Aligent\IO\Exception\IOObjectAlreadyInitializedException;

/**
 * Test class for IOFixedWidthFileWriter.
 * Generated by PHPUnit on 2012-06-01 at 09:45:16.
 */
class IOFixedWidthFileWriterTest extends PHPUnit_Framework_TestCase {

    protected static $directory = '';
    protected static $filename = '';
    protected static $filePath = '';
    protected static $streamUrl = '';
    protected $handle = NULL;
    protected $file = NULL;
    protected static $expectedHeader = '';
    protected static $expectedValues = '';
    protected static $sampleData = array(
        array('c1' => 'A', 'c2' => 'One', 'c3' => 'Line One'),
        array('c1' => 2, 'c2' => 'Two', 'c3' => 'Line Two'),
        array('c1' => 3, 'c2' => 'Three', 'c3' => 'Line Three')
    );
//    Array(
//        'name' => '', // The name to use as an index for any returned array of fields.
//        'label' => '', // The Label used to validate the file headers.
//        'fieldWidth' => NULL,
//        'readProcessor' => NULL, // callable. Any type of callback than can be supplied as the $callback parameter of call_user_func. Must accept a single string argument (the field value to be procesed) and return either a string (the processed field value) or FALSE. A FALSE return value is used to indicate that validation has failed, and a subsequent ValidationException will be thrown.
//        'writeProcessor' => NULL, // as per readProcessor.
//        'allowTruncate' => FALSE,
//    )

    protected $fieldProperties = array(
        array(
            'name' => 'c1',
            'label' => 'A',
            'fieldWidth' => 1,
            'writeProcessor' => array('IOFixedWidthFileWriterTest', 'castInt')
        ),
        array(
            'name' => 'c2',
            'label' => 'Col2',
            'fieldWidth' => 5
        ),
        array(
            'name' => 'c3',
            'label' => 'Col3',
            'fieldWidth' => 11
        ),
    );

    public static function castInt($value) {
        return (int) $value;
    }
    
    /**
     * @var type IOFixedWidthFileWriter
     */
    protected $fwFileWriter = NULL;

    public static function setUpBeforeClass() {
        static::$directory = 'test';
        static::$filename = 'test.fw';
        static::$filePath = self::$directory . DIRECTORY_SEPARATOR . self::$filename;
        static::$streamUrl = vfs\vfsStream::url(static::$filePath);
        static::$expectedHeader = 
                'ACol2 Col3       ' . PHP_EOL;
        static::$expectedValues =
//              '11234512345678901'
                static::$expectedHeader .
                '0One  Line One   ' . PHP_EOL . // (int) 'A' === 0
                '2Two  Line Two   ' . PHP_EOL .
                '3ThreeLine Three ' . PHP_EOL;
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        vfs\vfsStreamWrapper::register();
        vfs\vfsStreamWrapper::setRoot(new vfs\vfsStreamDirectory('test'));
        $this->handle = fopen(static::$streamUrl, 'w');
        $this->file = vfs\vfsStreamWrapper::getRoot()->getChild(static::$filename);
        $this->fwFileWriter = new IOFixedWidthFileWriter($this->handle);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
//        fclose($this->handle);  // don't close the handle so tests can pass the object among themselves.
    }

    public function testInitialize1() {
        $this->fwFileWriter->initialize();
        $this->assertTrue(TRUE, "Initialize doesn't do anything interesting on without any parameters.");
        return $this->fwFileWriter;
    }
    
    /**
     * @depends  testInitialize1
     * @expectedException Aligent\IO\Exception\IOObjectAlreadyInitializedException
     */
    public function testInitializeThrowsIOObjectAlreadyInitializedExceptionOnSecondInitializationAttempt(IOFixedWidthFileWriter $fwFileWriter) {
        $fwFileWriter->initialize();
    }
    
    public function testInitializeOutputsHeaders() {
        $this->fwFileWriter->initialize($this->fieldProperties, TRUE);
        $actualHeader = $this->file->getContent();
        $expectedHeader = static::$expectedHeader;
        $this->assertSame($expectedHeader, $actualHeader);
        return array($this->fwFileWriter, $this->file);
    }
    
    /**
     * @param array $args   A bit of a hack to get the fileWriter and the file
     *                      from testInitializeOutputsHeaders into testWrite
     * @depends  testInitializeOutputsHeaders
     */
    public function testWrite($args) {
        $fwFileWriter = $args[0];
        $file = $args[1];
        $this->assertNotNull($fwFileWriter);
        $this->assertCount(3, static::$sampleData);
        foreach(static::$sampleData as $data) {
            $this->assertTrue(!!$fwFileWriter->write($data));
        }
        $this->assertSame(static::$expectedValues, $file->getContent());
    }
    
    public function testIntAEqualsZero() {
        $this->assertSame(0, (int) 'A');
    }
    
}

?>
