<?php

require_once dirname(__FILE__) . '/../../IO/IO.php';

/**
 * Test class for IO::array_formatfw.
 * Generated by PHPUnit on 2012-05-30 at 09:55:32.
 */
class IOArrray_formatfwTest extends PHPUnit_Framework_TestCase {

    /**
     * @var IO
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new IO;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @expectedException IOIllegalParameterException
     * @dataProvider array_formatfwThrowsIOIllegalParameterExceptionProvider
     */
    public function testArray_formatfwThrowsIOIllegalParameterException(array $fields, array $fieldWidths, $truncateFields, $message) {
        IO::array_formatfw($fields, $fieldWidths, $truncateFields);
    }

    public function array_formatfwThrowsIOIllegalParameterExceptionProvider() {
        return array(
            array(array('abc'), array('1'), TRUE, 'Should only accept array of ints for $fieldWidths, array of strings supplied.'),
            array(array('abc'), array(-1), TRUE, 'Should only accept array of positive ints for $fieldWidths, negative value supplied.'),
            array(array('abc'), array(1), 'TRUE', 'Should only accept boolean for $truncateFields, string supplied'),
            array(array('abc'), array(1), '1', 'Should only accept boolean for $truncateFields, string supplied'),
            array(array('abc'), array(1), 1, 'Should only accept boolean for $truncateFields, int supplied'),
            array(array('abc'), array(1), 0, 'Should only accept boolean for $truncateFields, int supplied'),
        );
    }

    /**
     * @expectedException IOTooManyFieldsException
     * @dataProvider array_formatfwThrowsIOTooManyFieldsExceptionProvider
     */
    public function testArray_formatfwThrowsIOTooManyFieldsException(array $fields, array $fieldWidths) {
        IO::array_formatfw($fields, $fieldWidths);
    }

    public function array_formatfwThrowsIOTooManyFieldsExceptionProvider() {
        return array(
            array(array('a', 'b', 'c'), array(1, 1)),
            array(array('a'), array()),
            array(array('a', 'b', 'c'), array()),
            array(array('abc', 'def', 'xyd'), array(10, 10)),
        );
    }

    /**
     * @expectedException IOTooFewFieldsException
     * @dataProvider array_formatfwThrowsIOTooFewFieldsExceptionProvider
     */
    public function testArray_formatfwThrowsIOTooFewFieldsException(array $fields, array $fieldWidths) {
        IO::array_formatfw($fields, $fieldWidths);
    }

    public function array_formatfwThrowsIOTooFewFieldsExceptionProvider() {
        return array(
            array(array('a', 'b', 'c'), array(1, 1, 1, 1)),
            array(array(), array(1)),
            array(array(), array(1, 1, 1)),
            array(array('abcde', 'xyzhj'), array(5, 5, 0))
        );
    }

    /**
     * @expectedException IOFieldOverflowException
     * @dataProvider array_formatfwThrowsIOFieldOverflowExceptionProvider
     */
    public function testArray_formatfwThrowsIOFieldOverflowException(array $fields, array $fieldWidths) {
        IO::array_formatfw($fields, $fieldWidths);
    }

    public function array_formatfwThrowsIOFieldOverflowExceptionProvider() {
        return array(
            array(array('a'), array(0)),
            array(array('abcde'), array(4)),
            array(array('abcde'), array(1)),
            array(array('abc', 'abcd'), array(3, 3)),
        );
    }

    /**
     * @covers IO::array_formatfw
     * @dataProvider array_formatfwProvider
     */
    public function testArray_formatfw(array $fields, array $fieldWidths, $truncateFields, $expected) {
        $actual = IO::array_formatfw($fields, $fieldWidths, $truncateFields);
        $this->assertSame($expected, $actual);
    }

    public function array_formatfwProvider() {
        return array(
            array(array('abc'), array(3), FALSE, 'abc'),
            array(array('abc'), array(3), TRUE, 'abc'),
            array(array('a'), array(3), FALSE, 'a  '),
            array(array('a'), array(3), TRUE, 'a  '),
            array(array('abcd'), array(3), TRUE, 'abc'),
            array(array('Foo', 'Bob', 'Baz'), array(4, 4, 4), FALSE, "Foo Bob Baz "),
            array(array('Foo', 'Bob', 'Baz'), array(3, 3, 3), FALSE, "FooBobBaz"),
            array(array('1', '23', '45'), array(1, 2, 2), FALSE, "12345"),
            array(array('a'), array(1), FALSE, "a"),
            array(array('name' => 'Foo', 'number' => '10', 'street' => 'Test', 'test' => 'XYZ', 'code' => '1234'),
                array('name' => 6, 'number' => 6, 'street' => 20, 'test' => 5, 'code' => 4),
                FALSE,
                "Foo   10    Test                XYZ  1234"),
            array(array('Foo', 'Bob', 'Baz'), array(4, 4, 4), TRUE, "Foo Bob Baz "),
            array(array('Foo', 'Bob', 'Baz'), array(3, 3, 3), TRUE, "FooBobBaz"),
            array(array('Fooxyz', 'Bobxyz', 'Bazxyz'), array(3, 3, 3), TRUE, "FooBobBaz"),
            array(array('1', '23', '45'), array(1, 2, 2), TRUE, "12345"),
            array(array('a'), array(1), TRUE, "a"),
            array(array('name' => 'Foo', 'number' => '10', 'street' => 'Test', 'test' => 'XYZ', 'code' => '1234'),
                array('name' => 6, 'number' => 6, 'street' => 20, 'test' => 5, 'code' => 4),
                TRUE,
                "Foo   10    Test                XYZ  1234"),
        );
    }
    
}

?>
