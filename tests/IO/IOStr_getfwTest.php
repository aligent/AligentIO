<?php

require_once dirname(__FILE__) . '/../../IO/IO.php';

/**
 * Test class for IO::Str_getfw.
 * Generated by PHPUnit on 2012-05-29 at 15:47:42.
 */
class IOStr_getfwTest extends PHPUnit_Framework_TestCase {

    /**
     * @var IO
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @expectedException IOIllegalParameterException
     * @dataProvider str_getfwThrowsIOIllegalParameterExceptionWhenFieldWidthsIsArrayOfNotIntsProvider
     */
    public function testStr_getfwThrowsIOIllegalParameterExceptionWhenFieldWidthsIsArrayOfNotInts($string, array $fieldWidths) {
        IO::str_getfw($string, $fieldWidths);
    }
    
    public function str_getfwThrowsIOIllegalParameterExceptionWhenFieldWidthsIsArrayOfNotIntsProvider() {
        return array(
            array('abcxyz', array('a')),
            array('abc', array(-1))
        );
    }

    /**
     * @expectedException IOInputTooShortException
     */
    public function testStr_getfwThrowsIOInputTooShortException() {
        IO::str_getfw('abcdefgh', array(3, 3, 3));
    }

    /**
     * @expectedException IOInputTooLongException
     */
    public function testStr_getfwThrowsIOInputTooLongException() {
        IO::str_getfw('abcdefg', array(3, 3));
    }

    /**
     * @covers IO::str_getfw
     * @dataProvider str_getfwProvider
     */
    public function testStr_getfw($string, $fieldWidths, $expectedResult) {

        $result = IO::str_getfw($string, $fieldWidths);
        $this->assertSame($expectedResult, $result);
    }

    public function str_getfwProvider() {
        return array(
            array("Foo Bob Baz ", array(4, 4, 4), array('Foo', 'Bob', 'Baz')),
            array("12345", array(1, 2, 2), array('1', '23', '45')),
            array("a", array(1), array('a')),
            array("Foo   10    Test                XYZ  1234",
                array('name' => 6, 'number' => 6, 'street' => 20, 'test' => 5, 'code' => 4),
                array('name' => 'Foo', 'number' => '10', 'street' => 'Test', 'test' => 'XYZ', 'code' => '1234')),
        );
    }

}

?>
